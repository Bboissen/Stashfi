name: 'Docker Build and Scan'
description: 'Build Docker image and scan for vulnerabilities'
inputs:
  context:
    description: 'Build context path'
    required: true
  image-name:
    description: 'Docker image name'
    required: true
  platforms:
    description: 'Target platforms'
    required: false
    default: 'linux/amd64,linux/arm64'
  push:
    description: 'Push image to registry'
    required: false
    default: 'false'
  registry:
    description: 'Container registry'
    required: false
    default: 'ghcr.io'
  scan-severity:
    description: 'Vulnerability scan severity threshold'
    required: false
    default: 'CRITICAL,HIGH'

outputs:
  image-digest:
    description: 'Image digest'
    value: ${{ steps.build.outputs.digest }}
  scan-results:
    description: 'Path to scan results'
    value: ${{ steps.scan.outputs.sarif }}

runs:
  using: 'composite'
  steps:
    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3.6.0
      with:
        platforms: arm64

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.11.1
      with:
        driver-opts: |
          network=host
          image=moby/buildkit:v0.18.1

    - name: Generate metadata
      id: meta
      uses: docker/metadata-action@v5.8.0
      with:
        images: ${{ inputs.registry }}/${{ inputs.image-name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      id: build
      uses: docker/build-push-action@v6.18.0
      with:
        context: ${{ inputs.context }}
        platforms: ${{ inputs.platforms }}
        push: ${{ inputs.push }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        outputs: type=docker,dest=/tmp/image.tar

    - name: Load image for scanning
      shell: bash
      run: docker load --input /tmp/image.tar

    - name: Run Trivy scan
      id: scan
      uses: aquasecurity/trivy-action@0.33.1
      with:
        input: /tmp/image.tar
        format: 'sarif'
        output: 'trivy-results.sarif'
        severity: ${{ inputs.scan-severity }}
        vuln-type: 'os,library'

    - name: Run Hadolint
      uses: hadolint/hadolint-action@v3.1.0
      with:
        dockerfile: ${{ inputs.context }}/Dockerfile
        format: sarif
        output-file: hadolint-results.sarif
        no-fail: true
