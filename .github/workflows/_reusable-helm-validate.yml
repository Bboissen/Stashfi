name: Reusable Helm Validation

on:
  workflow_call:
    inputs:
      chart_path:
        description: 'Path to Helm chart'
        type: string
        required: true
      helm_version:
        description: 'Helm version'
        type: string
        default: '3.18.6'
      kubernetes_version:
        description: 'Kubernetes version for validation'
        type: string
        default: '1.31.3'
      run_kubeconform:
        description: 'Run kubeconform validation'
        type: boolean
        default: true
      run_pluto:
        description: 'Check for deprecated APIs'
        type: boolean
        default: true

jobs:
  validate:
    name: Validate Helm Chart
    runs-on: ubuntu-24.04
    container:
      image: ghcr.io/bboissen/ci-toolbox:24.04
      options: --user root

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Add Helm repositories
        run: |
          # Add common Helm repos
          helm repo add kong https://charts.konghq.com || true
          helm repo add bitnami https://charts.bitnami.com/bitnami || true
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts || true
          helm repo add grafana https://grafana.github.io/helm-charts || true
          helm repo update

      - name: Update dependencies
        working-directory: ${{ inputs.chart_path }}
        run: |
          if [ -f Chart.yaml ]; then
            helm dependency update
            helm dependency build
          fi

      - name: Lint Helm chart
        working-directory: ${{ inputs.chart_path }}
        run: |
          helm lint . \
            --strict \
            --with-subcharts

      - name: Template with default values
        working-directory: ${{ inputs.chart_path }}
        run: |
          helm template test-release . \
            --debug \
            --kube-version v${{ inputs.kubernetes_version }} \
            --namespace stashfi \
            > rendered-default.yaml
          echo "✅ Chart templated successfully with default values"

      - name: Template with production values
        working-directory: ${{ inputs.chart_path }}
        run: |
          if [ -f values-production.yaml ]; then
            helm template test-release . \
              --values values-production.yaml \
              --kube-version v${{ inputs.kubernetes_version }} \
              --namespace stashfi-prod \
              > rendered-production.yaml
            echo "✅ Chart templated successfully with production values"
          fi

      - name: Run kubeconform validation
        if: inputs.run_kubeconform
        working-directory: ${{ inputs.chart_path }}
        run: |
          echo "Running kubeconform on rendered manifests..."
          if [ -f rendered-default.yaml ]; then
            kubeconform \
              -kubernetes-version ${{ inputs.kubernetes_version }} \
              -schema-location default \
              -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
              -summary \
              -verbose \
              rendered-default.yaml
          fi

          if [ -f rendered-production.yaml ]; then
            kubeconform \
              -kubernetes-version ${{ inputs.kubernetes_version }} \
              -schema-location default \
              -schema-location 'https://raw.githubusercontent.com/datreeio/CRDs-catalog/main/{{.Group}}/{{.ResourceKind}}_{{.ResourceAPIVersion}}.json' \
              -summary \
              -verbose \
              rendered-production.yaml
          fi

      - name: Check for deprecated APIs with Pluto
        if: inputs.run_pluto
        working-directory: ${{ inputs.chart_path }}
        run: |
          echo "Checking for deprecated Kubernetes APIs..."
          if [ -f rendered-default.yaml ]; then
            pluto detect rendered-default.yaml \
              --target-versions k8s=v${{ inputs.kubernetes_version }} \
              --output wide
          fi

          if [ -f rendered-production.yaml ]; then
            pluto detect rendered-production.yaml \
              --target-versions k8s=v${{ inputs.kubernetes_version }} \
              --output wide
          fi

      - name: Upload rendered manifests
        uses: actions/upload-artifact@v4.6.2
        with:
          name: helm-manifests-${{ github.job }}
          path: |
            ${{ inputs.chart_path }}/rendered-*.yaml
