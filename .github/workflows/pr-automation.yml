name: PR Automation

on:
  pull_request:
    types: [opened, edited, synchronize, ready_for_review]
  pull_request_review:
    types: [submitted]
  issue_comment:
    types: [created]

permissions:
  contents: read
  pull-requests: write
  issues: write
  checks: write

jobs:
  auto-label:
    name: Auto Label PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Label based on files changed
        uses: actions/labeler@v5.0.0
        with:
          repo-token: "${{ secrets.GITHUB_TOKEN }}"
          configuration-path: .github/labeler.yml

      - name: Label based on PR title
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;
            const title = pr.title.toLowerCase();
            const labels = [];

            // Conventional commit types
            if (title.startsWith('feat:') || title.startsWith('feature:')) labels.push('enhancement');
            if (title.startsWith('fix:')) labels.push('bug');
            if (title.startsWith('docs:')) labels.push('documentation');
            if (title.startsWith('test:')) labels.push('tests');
            if (title.startsWith('chore:')) labels.push('chore');
            if (title.startsWith('refactor:')) labels.push('refactor');
            if (title.startsWith('perf:')) labels.push('performance');
            if (title.startsWith('security:')) labels.push('security');
            if (title.includes('breaking')) labels.push('breaking-change');

            // Size labels based on diff
            const { additions, deletions } = pr;
            const changes = additions + deletions;
            if (changes < 10) labels.push('size/XS');
            else if (changes < 50) labels.push('size/S');
            else if (changes < 200) labels.push('size/M');
            else if (changes < 500) labels.push('size/L');
            else labels.push('size/XL');

            if (labels.length > 0) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                labels: labels
              });
            }

  pr-validation:
    name: Validate PR
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check PR title
        uses: amannn/action-semantic-pull-request@v6.1.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          types: |
            feat
            fix
            docs
            style
            refactor
            perf
            test
            build
            ci
            chore
            revert
            security
          requireScope: false
          subjectPattern: ^(?![A-Z]).+$
          subjectPatternError: |
            The subject "{subject}" found in the pull request title "{title}"
            didn't match the configured pattern. Please ensure that the subject
            doesn't start with an uppercase character.

      - name: Check PR description
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;
            const body = pr.body || '';

            // Check for minimum description length
            if (body.length < 50) {
              core.setFailed('PR description is too short. Please provide a detailed description.');
              return;
            }

            // Check for required sections
            const requiredSections = ['## What', '## Why', '## How'];
            const missingSections = requiredSections.filter(section =>
              !body.includes(section)
            );

            if (missingSections.length > 0) {
              const comment = `
              ## üìù PR Description Required

              Please update your PR description to include the following sections:
              ${missingSections.map(s => `- ${s}`).join('\n')}

              Example template:
              \`\`\`markdown
              ## What
              Brief description of the changes

              ## Why
              Motivation and context for the changes

              ## How
              Technical approach and implementation details

              ## Testing
              How the changes were tested

              ## Checklist
              - [ ] Tests added/updated
              - [ ] Documentation updated
              - [ ] No breaking changes
              \`\`\`
              `;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });

              core.setFailed('PR description is missing required sections');
            }

  auto-assign:
    name: Auto Assign Reviewers
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.event.action == 'opened'
    steps:
      - name: Auto assign reviewers based on files
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;
            const files = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: pr.number
            });

            const reviewers = new Set();

            // Code owners mapping
            for (const file of files.data) {
              if (file.filename.startsWith('services/api-gateway/')) {
                reviewers.add('backend-team');
              }
              if (file.filename.startsWith('infra/')) {
                reviewers.add('devops-team');
              }
              if (file.filename.startsWith('.github/')) {
                reviewers.add('platform-team');
              }
            }

            if (reviewers.size > 0) {
              await github.rest.pulls.requestReviewers({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr.number,
                team_reviewers: Array.from(reviewers)
              }).catch(err => {
                console.log('Could not assign team reviewers:', err.message);
              });
            }

  pr-size-check:
    name: Check PR Size
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Check PR size and complexity
        uses: actions/github-script@v8
        with:
          script: |
            const pr = context.payload.pull_request;
            const { additions, deletions, changed_files } = pr;
            const totalChanges = additions + deletions;

            let comment = '';
            let shouldWarn = false;

            if (totalChanges > 800) {
              shouldWarn = true;
              comment += '## ‚ö†Ô∏è Large PR Detected\n\n';
              comment += `This PR contains ${totalChanges} lines of changes across ${changed_files} files.\n\n`;
              comment += 'Consider breaking this PR into smaller, more focused changes for easier review.\n\n';
              comment += '**Suggestions:**\n';
              comment += '- Split by feature/functionality\n';
              comment += '- Separate refactoring from new features\n';
              comment += '- Create a PR stack for dependent changes\n';
            }

            if (changed_files > 20) {
              shouldWarn = true;
              comment += '## üìÅ Many Files Changed\n\n';
              comment += `This PR modifies ${changed_files} files. `;
              comment += 'This might make it difficult to review thoroughly.\n';
            }

            if (shouldWarn) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }

  auto-merge:
    name: Auto Merge Dependabot PRs
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' && github.actor == 'dependabot[bot]'
    steps:
      - name: Dependabot metadata
        id: metadata
        uses: dependabot/fetch-metadata@v2.4.0
        with:
          github-token: "${{ secrets.GITHUB_TOKEN }}"

      - name: Enable auto-merge for Dependabot PRs
        if: steps.metadata.outputs.update-type == 'version-update:semver-minor' || steps.metadata.outputs.update-type == 'version-update:semver-patch'
        run: gh pr merge --auto --merge "$PR_URL"
        env:
          PR_URL: ${{ github.event.pull_request.html_url }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  test-coverage-comment:
    name: Post Test Coverage
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.25.0'

      - name: Run tests with coverage
        run: |
          cd services/api-gateway
          go test -coverprofile=coverage.out ./...
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}')
          echo "coverage=$COVERAGE" >> $GITHUB_ENV

      - name: Post coverage comment
        uses: actions/github-script@v8
        with:
          script: |
            const coverage = process.env.coverage;
            const pr = context.payload.pull_request;

            const comment = `## üìä Test Coverage Report

            **Overall Coverage:** ${coverage}

            | Status | Coverage | Threshold |
            |--------|----------|-----------|
            | ${parseFloat(coverage) >= 70 ? '‚úÖ' : '‚ùå'} | ${coverage} | 70% |

            <details>
            <summary>Coverage Details</summary>

            Run \`go test -cover ./...\` locally for detailed coverage information.

            </details>

            ---
            *Coverage report generated for commit ${pr.head.sha.substring(0, 7)}*
            `;

            // Find and update existing comment or create new one
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number
            });

            const botComment = comments.find(comment =>
              comment.user.type === 'Bot' && comment.body.includes('Test Coverage Report')
            );

            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr.number,
                body: comment
              });
            }

  pr-commands:
    name: Handle PR Commands
    runs-on: ubuntu-latest
    if: github.event_name == 'issue_comment' && github.event.issue.pull_request
    steps:
      - name: Handle slash commands
        uses: actions/github-script@v8
        with:
          script: |
            const comment = context.payload.comment.body;
            const commenter = context.payload.comment.user.login;
            const pr = context.payload.issue.number;

            // Check if commenter has write permission
            const { data: permission } = await github.rest.repos.getCollaboratorPermissionLevel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              username: commenter
            });

            if (!['admin', 'write'].includes(permission.permission)) {
              return;
            }

            // Handle commands
            if (comment === '/rebase') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: 'üîÑ Rebasing PR with main branch...'
              });
              // Trigger rebase workflow
            }

            if (comment === '/update-snapshots') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: 'üì∏ Updating test snapshots...'
              });
              // Trigger snapshot update
            }

            if (comment === '/benchmark') {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr,
                body: '‚ö° Running performance benchmarks...'
              });
              // Trigger benchmark workflow
            }
