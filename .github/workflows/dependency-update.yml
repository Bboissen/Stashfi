name: Dependency Management

on:
  schedule:
    - cron: '0 8 * * MON'  # Weekly on Monday at 8 AM UTC
  workflow_dispatch:
    inputs:
      update-major:
        description: 'Update major versions'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write
  issues: write

jobs:
  update-go-dependencies:
    name: Update Go Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Update Go modules
        id: update-go
        run: |
          cd services/api-gateway

          # Get current versions
          echo "## Current Dependencies" > /tmp/go-deps-before.txt
          go list -m all >> /tmp/go-deps-before.txt

          # Update to latest versions
          if [ "${{ github.event.inputs.update-major }}" == "true" ]; then
            echo "Updating to latest versions (including major)"
            go get -u ./...
          else
            echo "Updating to latest minor/patch versions"
            go get -u=patch ./...
          fi

          # Tidy up
          go mod tidy

          # Get new versions
          echo "## Updated Dependencies" > /tmp/go-deps-after.txt
          go list -m all >> /tmp/go-deps-after.txt

          # Check for changes
          if git diff --exit-code go.mod go.sum; then
            echo "No updates available"
            echo "has-updates=false" >> $GITHUB_OUTPUT
          else
            echo "Updates found"
            echo "has-updates=true" >> $GITHUB_OUTPUT

            # Generate changelog
            echo "## 📦 Updated Dependencies" > /tmp/go-changelog.md
            echo "" >> /tmp/go-changelog.md

            # Show actual version changes
            git diff go.mod | grep '^[+-]' | grep -v '^[+-]module' | grep -v '^+++' | grep -v '^---' | while read line; do
              if [[ $line == +* ]]; then
                echo "✅ ${line:1}" >> /tmp/go-changelog.md
              elif [[ $line == -* ]]; then
                echo "❌ ${line:1}" >> /tmp/go-changelog.md
              fi
            done

            # Set changelog as output using heredoc delimiter
            echo "changelog<<EOF" >> $GITHUB_OUTPUT
            cat /tmp/go-changelog.md >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          fi

      - name: Run tests after update
        if: steps.update-go.outputs.has-updates == 'true'
        run: |
          cd services/api-gateway
          go test -race ./...

      - name: Create Pull Request for Go updates
        if: steps.update-go.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update Go dependencies'
          title: '⬆️ Update Go Dependencies'
          body: |
            ## 🔄 Dependency Updates

            This PR updates Go module dependencies to their latest versions.

            ### Changes
            ${{ steps.update-go.outputs.changelog }}

            ### Update Type
            - [x] Security patches
            - [x] Bug fixes
            - ${{ github.event.inputs.update-major == 'true' && '[x]' || '[ ]' }} Major version updates

            ### Checklist
            - [x] Tests pass
            - [x] No breaking changes detected
            - [ ] Manual review completed

            ---
            *This PR was automatically generated by the Dependency Management workflow*
          branch: deps/go-updates-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            go

  update-docker-base-images:
    name: Update Docker Base Images
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check and update Docker base images
        id: update-docker
        run: |
          echo "## 🐳 Docker Base Image Updates" > /tmp/docker-updates.md
          echo "" >> /tmp/docker-updates.md
          has_updates=false

          # Find all Dockerfiles
          DOCKERFILES=$(find . -name "Dockerfile" -type f)

          for dockerfile in $DOCKERFILES; do
            echo "Checking $dockerfile"
            updated=false

            # Process each FROM line
            while IFS= read -r line; do
              if [[ $line == FROM* ]]; then
                # Extract image and tag
                image_full=$(echo "$line" | awk '{print $2}')

                # Skip AS builder lines
                if [[ $line == *" AS "* ]]; then
                  base_image=$(echo "$line" | sed 's/ AS .*//' | awk '{print $2}')
                else
                  base_image=$image_full
                fi

                # Parse image name and tag
                if [[ $base_image == *:* ]]; then
                  image_name=$(echo "$base_image" | cut -d: -f1)
                  current_tag=$(echo "$base_image" | cut -d: -f2)
                else
                  image_name=$base_image
                  current_tag="latest"
                fi

                # Check for updates based on image type
                new_tag=""
                if [[ $image_name == "golang" ]]; then
                  # Check for latest Go 1.25 Alpine version
                  new_tag=$(curl -s "https://hub.docker.com/v2/repositories/library/golang/tags?page_size=100" | \
                    jq -r '.results[] | select(.name | test("^1\\.25-alpine3\\.[0-9]+$")) | .name' | \
                    sort -V | tail -1)
                elif [[ $image_name == "alpine" ]]; then
                  # Check for latest Alpine 3.x version
                  new_tag=$(curl -s "https://hub.docker.com/v2/repositories/library/alpine/tags?page_size=100" | \
                    jq -r '.results[] | select(.name | test("^3\\.[0-9]+$")) | .name' | \
                    sort -V | tail -1)
                elif [[ $image_name == "gcr.io/distroless/static" ]] || [[ $image_name == "gcr.io/distroless/static-debian12" ]]; then
                  # For distroless, check latest
                  new_tag="nonroot"  # Or "latest", depending on preference
                fi

                # Compare and update if newer
                if [[ -n "$new_tag" ]] && [[ "$current_tag" != "$new_tag" ]]; then
                  echo "Found update: $base_image → ${image_name}:${new_tag}"

                  # Update the Dockerfile
                  sed -i "s|${base_image}|${image_name}:${new_tag}|g" "$dockerfile"

                  # Add to changelog
                  echo "✅ **${dockerfile#./}**: \`${base_image}\` → \`${image_name}:${new_tag}\`" >> /tmp/docker-updates.md
                  has_updates=true
                  updated=true
                fi
              fi
            done < "$dockerfile"

            if [ "$updated" = true ]; then
              echo "Updated $dockerfile"
            fi
          done

          # Set outputs
          echo "has-updates=$has_updates" >> $GITHUB_OUTPUT

          # Set changelog as output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/docker-updates.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

          # Debug output
          echo "Updates found: $has_updates"
          cat /tmp/docker-updates.md

      - name: Create Pull Request for Docker updates
        if: steps.update-docker.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update Docker base images'
          title: '🐳 Update Docker Base Images'
          body: |
            ## 🔄 Docker Base Image Updates

            This PR updates Docker base images to their latest versions.

            ### Changes
            ${{ steps.update-docker.outputs.changelog }}

            ### Security Benefits
            - Latest security patches
            - Updated system packages
            - Reduced vulnerability surface

            ### Checklist
            - [ ] Images build successfully
            - [ ] Container starts without errors
            - [ ] Security scans pass

            ---
            *This PR was automatically generated by the Dependency Management workflow*
          branch: deps/docker-updates-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            docker

  update-github-actions:
    name: Update GitHub Actions
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update GitHub Actions
        uses: actions/dependency-review-action@v4
        with:
          config: dependency-review-config.yml

      - name: Check for action updates
        run: |
          # Install action-updater
          npm install -g actions-updater

          # Check for updates
          actions-updater check || true

          # Update actions
          if [ "${{ github.event.inputs.update-major }}" == "true" ]; then
            actions-updater update --major
          else
            actions-updater update --minor
          fi

  update-helm-dependencies:
    name: Update Helm Dependencies
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Add Helm repositories
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo update

      - name: Check for Helm chart updates
        id: helm-updates
        run: |
          echo "## 🔄 Helm Chart Updates" > /tmp/helm-updates.md
          echo "" >> /tmp/helm-updates.md
          has_updates=false

          for chart_dir in infra/helm/*; do
            if [ -f "$chart_dir/Chart.yaml" ]; then
              echo "Checking $chart_dir"
              cd "$chart_dir"

              # Check for dependency updates
              helm dependency list | tail -n +2 | while read name version repo status; do
                if [ "$name" != "" ]; then
                  latest=$(helm search repo "$name" -o json | jq -r '.[0].version')
                  if [ "$version" != "$latest" ]; then
                    echo "✅ **$name**: $version → $latest" >> /tmp/helm-updates.md
                    has_updates=true
                  fi
                fi
              done

              cd - > /dev/null
            fi
          done

          # Set outputs
          echo "has-updates=$has_updates" >> $GITHUB_OUTPUT

          # Set changelog as output
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat /tmp/helm-updates.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Update Helm dependencies
        if: steps.helm-updates.outputs.has-updates == 'true'
        run: |
          for chart_dir in infra/helm/*; do
            if [ -f "$chart_dir/Chart.yaml" ]; then
              cd "$chart_dir"
              helm dependency update
              cd - > /dev/null
            fi
          done

      - name: Create PR for Helm updates
        if: steps.helm-updates.outputs.has-updates == 'true'
        uses: peter-evans/create-pull-request@v6
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: 'chore(deps): update Helm chart dependencies'
          title: '⬆️ Update Helm Dependencies'
          body: |
            ## 📊 Helm Chart Updates

            This PR updates Helm chart dependencies.

            ### Updates Available
            ${{ steps.helm-updates.outputs.changelog }}

            ---
            *This PR was automatically generated by the Dependency Management workflow*
          branch: deps/helm-updates-${{ github.run_number }}
          delete-branch: true
          labels: |
            dependencies
            automated
            helm

  security-audit:
    name: Security Audit After Updates
    runs-on: ubuntu-latest
    needs: [update-go-dependencies, update-docker-base-images, update-helm-dependencies]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Trigger security scan workflow
        run: |
          echo "Running security audit on updated dependencies..."

          # GitHub CLI is pre-installed on GitHub-hosted runners
          # Authenticate with the default GITHUB_TOKEN
          gh auth status || gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"

          # Trigger the security scanning workflow
          gh workflow run security-scan.yml \
            --ref ${{ github.ref }}
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  generate-dependency-report:
    name: Generate Dependency Report
    runs-on: ubuntu-latest
    needs: [update-go-dependencies, update-docker-base-images, update-helm-dependencies]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate SBOM
        uses: anchore/sbom-action@v0
        with:
          path: ./services/api-gateway
          format: spdx-json
          output-file: sbom.json

      - name: Generate dependency report
        run: |
          cat > dependency-report.md << 'EOF'
          # Dependency Management Report

          ## Scan Date
          $(date)

          ## Go Modules
          ### Current Versions
          $(cd services/api-gateway && go list -m all)

          ## Docker Base Images
          ### Golang
          - Current: golang:1.25-alpine3.21
          - Latest: Check Docker Hub

          ### Alpine
          - Current: alpine:3.21
          - Latest: Check Docker Hub

          ## Helm Charts
          ### Kong
          - Current: 2.51.0
          - Latest: Check Helm Repository

          ## Update Policy
          - **Patch updates**: Automatic weekly
          - **Minor updates**: Automatic weekly with tests
          - **Major updates**: Manual review required

          ## Security Considerations
          - All updates undergo security scanning
          - Breaking changes require manual approval
          - Production deployments require staging validation

          ---
          *Generated by Dependency Management workflow*
          EOF

      - name: Upload reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-reports
          path: |
            dependency-report.md
            sbom.json
          retention-days: 30
