name: Release Automation

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  packages: write
  id-token: write
  attestations: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
      previous-tag: ${{ steps.version.outputs.previous-tag }}
      is-prerelease: ${{ steps.version.outputs.is-prerelease }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            # Auto-detect prerelease from version tag
            if echo "$VERSION" | grep -qE "(alpha|beta|rc|pre)"; then
              IS_PRERELEASE="true"
            else
              IS_PRERELEASE="false"
            fi
          fi
          
          echo "version=${VERSION}" >> $GITHUB_OUTPUT
          echo "is-prerelease=${IS_PRERELEASE}" >> $GITHUB_OUTPUT
          
          # Get previous tag for changelog
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          echo "previous-tag=${PREVIOUS_TAG}" >> $GITHUB_OUTPUT
          
          echo "Releasing version: ${VERSION}"
          echo "Previous version: ${PREVIOUS_TAG}"
          echo "Is prerelease: ${IS_PRERELEASE}"

      - name: Generate changelog
        id: changelog
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          PREVIOUS="${{ steps.version.outputs.previous-tag }}"
          
          if [ -z "$PREVIOUS" ]; then
            echo "No previous version, including all commits"
            RANGE=""
          else
            RANGE="${PREVIOUS}..HEAD"
          fi
          
          # Generate changelog
          cat > CHANGELOG_TEMP.md << 'EOF'
          ## What's Changed
          
          EOF
          
          # Features
          echo "### ✨ Features" >> CHANGELOG_TEMP.md
          git log $RANGE --pretty=format:"- %s (%h)" --grep="^feat" >> CHANGELOG_TEMP.md || echo "- No new features" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Bug Fixes
          echo "### 🐛 Bug Fixes" >> CHANGELOG_TEMP.md
          git log $RANGE --pretty=format:"- %s (%h)" --grep="^fix" >> CHANGELOG_TEMP.md || echo "- No bug fixes" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Documentation
          echo "### 📚 Documentation" >> CHANGELOG_TEMP.md
          git log $RANGE --pretty=format:"- %s (%h)" --grep="^docs" >> CHANGELOG_TEMP.md || echo "- No documentation updates" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Other Changes
          echo "### 🔧 Other Changes" >> CHANGELOG_TEMP.md
          git log $RANGE --pretty=format:"- %s (%h)" --grep -v "^feat\|^fix\|^docs" | head -10 >> CHANGELOG_TEMP.md || echo "- Various improvements" >> CHANGELOG_TEMP.md
          echo "" >> CHANGELOG_TEMP.md
          
          # Contributors
          echo "### 👥 Contributors" >> CHANGELOG_TEMP.md
          git log $RANGE --pretty=format:"%an" | sort -u | while read name; do
            echo "- @$name" >> CHANGELOG_TEMP.md
          done
          
          # Stats
          echo "" >> CHANGELOG_TEMP.md
          echo "### 📊 Stats" >> CHANGELOG_TEMP.md
          echo "- Commits: $(git rev-list --count $RANGE)" >> CHANGELOG_TEMP.md
          echo "- Changed files: $(git diff --name-only $RANGE | wc -l)" >> CHANGELOG_TEMP.md
          
          # Set multiline output
          {
            echo 'changelog<<EOF'
            cat CHANGELOG_TEMP.md
            echo EOF
          } >> $GITHUB_OUTPUT

  build-release-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      fail-fast: false  # Build all binaries even if one fails
      matrix:
        include:
          - os: linux
            arch: amd64
          - os: linux
            arch: arm64
          - os: darwin
            arch: amd64
          - os: darwin
            arch: arm64
          - os: windows
            arch: amd64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.25.0'

      - name: Build binary
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -ldflags="-s -w -X main.Version=${VERSION} -X main.BuildTime=$(date -u +%Y%m%d-%H%M%S)" \
          -o api-gateway-${{ matrix.os }}-${{ matrix.arch }} \
          ./services/api-gateway

      - name: Create archive
        run: |
          tar czf api-gateway-${{ needs.prepare-release.outputs.version }}-${{ matrix.os }}-${{ matrix.arch }}.tar.gz \
            api-gateway-${{ matrix.os }}-${{ matrix.arch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-binary-${{ matrix.os }}-${{ matrix.arch }}
          path: api-gateway-*.*
          retention-days: 7

  build-docker-images:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Log in to Docker Hub
        if: env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image (GHCR + Docker Hub)
        if: env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != ''
        id: build-all
        uses: docker/build-push-action@v6
        env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
        with:
          context: ./services/api-gateway
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/api-gateway:${{ needs.prepare-release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/api-gateway:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/stashfi-api-gateway:${{ needs.prepare-release.outputs.version }}
            ${{ secrets.DOCKERHUB_USERNAME }}/stashfi-api-gateway:latest
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
      
      - name: Build and push Docker image (GHCR only)
        if: env.DOCKERHUB_USERNAME == '' || env.DOCKERHUB_TOKEN == ''
        id: build-ghcr
        uses: docker/build-push-action@v6
        with:
          context: ./services/api-gateway
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ghcr.io/${{ github.repository_owner }}/api-gateway:${{ needs.prepare-release.outputs.version }}
            ghcr.io/${{ github.repository_owner }}/api-gateway:latest
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          provenance: mode=max
          sbom: true

      - name: Export single-arch image for security scanning
        uses: docker/build-push-action@v6
        with:
          context: ./services/api-gateway
          platforms: linux/amd64
          outputs: type=docker,dest=/tmp/release-image.tar
          tags: ghcr.io/${{ github.repository_owner }}/api-gateway:scan-${{ needs.prepare-release.outputs.version }}
          build-args: |
            VERSION=${{ needs.prepare-release.outputs.version }}
            BUILD_DATE=${{ github.event.head_commit.timestamp }}
            VCS_REF=${{ github.sha }}
          cache-from: type=gha

      - name: Load image for scanning
        run: docker load --input /tmp/release-image.tar

      - name: Run Trivy vulnerability scanner on release
        uses: aquasecurity/trivy-action@0.31.0
        with:
          image-ref: ghcr.io/${{ github.repository_owner }}/api-gateway:scan-${{ needs.prepare-release.outputs.version }}
          format: 'sarif'
          output: 'trivy-release.sarif'
          severity: 'CRITICAL,HIGH'
          vuln-type: 'os,library'
          exit-code: '1'

      - name: Upload Trivy results to GitHub Security
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-release.sarif'
          category: 'release-container-scan'

      - name: Get image digest
        id: digest
        run: |
          # Get digest from whichever build step ran
          if [ -n "${{ steps.build-all.outputs.digest }}" ]; then
            DIGEST="${{ steps.build-all.outputs.digest }}"
          else
            DIGEST="${{ steps.build-ghcr.outputs.digest }}"
          fi
          echo "digest=${DIGEST}" >> $GITHUB_OUTPUT
          
      - name: Generate attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ghcr.io/${{ github.repository_owner }}/api-gateway
          subject-digest: ${{ steps.digest.outputs.digest }}
          push-to-registry: true

  package-helm-chart:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: prepare-release
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4

      - name: Update Chart version
        run: |
          VERSION="${{ needs.prepare-release.outputs.version }}"
          VERSION_NO_V="${VERSION#v}"  # Remove 'v' prefix
          
          for chart in infra/helm/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              sed -i "s/^version:.*/version: ${VERSION_NO_V}/" "$chart/Chart.yaml"
              sed -i "s/^appVersion:.*/appVersion: ${VERSION_NO_V}/" "$chart/Chart.yaml"
            fi
          done

      - name: Package Helm charts
        run: |
          mkdir -p helm-packages
          
          for chart in infra/helm/*; do
            if [ -f "$chart/Chart.yaml" ]; then
              helm dependency update "$chart"
              helm package "$chart" --destination helm-packages/
            fi
          done

      - name: Create Helm repository index
        run: |
          helm repo index helm-packages/ --url https://github.com/${{ github.repository }}/releases/download/${{ needs.prepare-release.outputs.version }}/

      - name: Upload Helm charts
        uses: actions/upload-artifact@v4
        with:
          name: helm-charts
          path: helm-packages/
          retention-days: 7

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release-artifacts, build-docker-images, package-helm-chart]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release-artifacts/

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.prepare-release.outputs.version }}
          name: Release ${{ needs.prepare-release.outputs.version }}
          body: |
            # Release ${{ needs.prepare-release.outputs.version }}
            
            ${{ needs.prepare-release.outputs.changelog }}
            
            ## 📦 Installation
            
            ### Docker
            ```bash
            docker pull ghcr.io/${{ github.repository_owner }}/api-gateway:${{ needs.prepare-release.outputs.version }}
            ```
            
            ### Helm
            ```bash
            helm install stashfi-kong ./kong-${{ needs.prepare-release.outputs.version }}.tgz
            ```
            
            ### Binary
            Download the appropriate binary for your platform from the assets below.
            
            ## 🔐 Verification
            
            All Docker images are signed and include SBOM attestation.
            
            ## 📝 Full Changelog
            
            ${{ needs.prepare-release.outputs.previous-tag != '' && format('[{0}...{1}](https://github.com/{2}/compare/{0}...{1})', needs.prepare-release.outputs.previous-tag, needs.prepare-release.outputs.version, github.repository) || 'Initial Release' }}
          draft: false
          prerelease: ${{ needs.prepare-release.outputs.is-prerelease == 'true' }}
          files: |
            release-artifacts/**/*.tar.gz
            release-artifacts/**/*.zip
            release-artifacts/helm-charts/*.tgz
            release-artifacts/helm-charts/index.yaml
          generate_release_notes: true

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: needs.prepare-release.outputs.is-prerelease != 'true'
    environment:
      name: staging
      url: https://staging.stashfi.com
    steps:
      - name: Deploy to staging
        run: |
          echo "Deploying version ${{ needs.prepare-release.outputs.version }} to staging..."
          # Add actual deployment commands here
          
      - name: Run smoke tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    if: always()
    steps:
      - name: Send Slack notification
        if: success()
        uses: slackapi/slack-github-action@v1
        with:
          payload: |
            {
              "text": "🚀 New release published: ${{ needs.prepare-release.outputs.version }}",
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "*New Release Published* 🚀\n*Version:* ${{ needs.prepare-release.outputs.version }}\n*Repository:* ${{ github.repository }}"
                  }
                },
                {
                  "type": "actions",
                  "elements": [
                    {
                      "type": "button",
                      "text": {
                        "type": "plain_text",
                        "text": "View Release"
                      },
                      "url": "https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.version }}"
                    }
                  ]
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}