name: Security Scanning

on:
  push:
    branches: [ main, "feat/**", "fix/**", "hotfix/**", "security/**" ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  schedule:
    - cron: '0 6 * * 1'  # Weekly on Monday at 6 AM UTC
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read

jobs:
  code-scanning:
    name: Code Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.25.x'

      - name: Run Gosec Security Scanner
        uses: securego/gosec@v2.22.8
        with:
          args: '-fmt sarif -out gosec-results.sarif -severity medium ./...'

      - name: Upload Gosec results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3.30.0
        with:
          sarif_file: gosec-results.sarif
          category: gosec

      - name: Run Semgrep (SARIF)
        run: |
          docker run --rm -v "$PWD:/src" returntocorp/semgrep:1.134.0 \
            semgrep \
              --config p/security-audit \
              --config p/golang \
              --config p/owasp-top-ten \
              --config p/kubernetes \
              --config p/docker \
              --sarif -o /src/semgrep.sarif /src || true

      - name: Upload Semgrep results
        uses: github/codeql-action/upload-sarif@v3.30.0
        if: always()
        with:
          sarif_file: semgrep.sarif
          category: semgrep

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3.30.0
        with:
          languages: go
          queries: security-and-quality

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3.30.0

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3.30.0
        with:
          category: "/language:go"

  dependency-scanning:
    name: Dependency Vulnerability Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.25.x'

      - name: Run Go vulnerability check
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.4
          govulncheck -json ./... | tee govuln-report.json
        working-directory: ./services/api-gateway

      - name: Parse vulnerability results
        run: |
          if [ -s govuln-report.json ]; then
            echo "## Vulnerability Report" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`json" >> $GITHUB_STEP_SUMMARY
            cat govuln-report.json >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          fi
        working-directory: ./services/api-gateway

      - name: Run Nancy
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecorp/nancy:1.0.51 sleuth --output json | tee nancy-report.json
        working-directory: ./services/api-gateway
        continue-on-error: true

      - name: Dependency-Check (Docker)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          mkdir -p reports
          docker run --rm -u $(id -u):$(id -g) \
            -v "$(pwd):/src" \
            ghcr.io/jeremylong/owasp-dependency-check:latest \
              --scan /src \
              --project "stashfi" \
              --format "SARIF" \
              --out /src/reports \
              ${NVD_API_KEY:+--nvdApiKey ${NVD_API_KEY}} \
              --enableRetired \
              --enableExperimental || true

      - name: Upload Dependency-Check results
        uses: github/codeql-action/upload-sarif@v3.30.0
        with:
          sarif_file: reports/dependency-check-report.sarif
          category: dependency-check

  secret-scanning:
    name: Secret Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Run Gitleaks
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}

      - name: Run TruffleHog
        uses: trufflesecurity/trufflehog@v3.90.6
        with:
          path: ./
          base: ${{ github.event.repository.default_branch }}
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run detect-secrets
        run: |
          pip install detect-secrets
          detect-secrets scan --baseline .secrets.baseline || true

  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.25.x'

      - name: Install go-licenses
        run: go install github.com/google/go-licenses@v1.6.0

      - name: Check licenses
        run: |
          cd services/api-gateway
          go-licenses check . --disallowed_types=forbidden,restricted,reciprocal,unknown
          go-licenses report . --template=csv > licenses.csv

          echo "## License Report" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          cat licenses.csv >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

      - name: Upload license report
        uses: actions/upload-artifact@v4.6.2
        if: ${{ !env.ACT }}  # Skip when running locally with act
        with:
          name: license-report
          path: services/api-gateway/licenses.csv

      - name: Save license report locally
        if: ${{ env.ACT }}  # Only run locally with act
        run: |
          mkdir -p /tmp/artifacts
          cp services/api-gateway/licenses.csv /tmp/artifacts/ 2>/dev/null || true
          echo "ðŸ“¦ License report saved locally to /tmp/artifacts/"

  infrastructure-scanning:
    name: Infrastructure Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Run Checkov
        uses: bridgecrewio/checkov-action@v12.3056.0
        with:
          directory: .
          framework: kubernetes,helm,dockerfile,github_actions,json,yaml
          output_format: sarif
          output_file_path: checkov-results.sarif
          download_external_modules: true
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3.30.0
        with:
          sarif_file: checkov-results.sarif
          category: infrastructure

      - name: Run Terrascan
        run: |
          docker run --rm -v "$(pwd):/src" \
            tenable/terrascan:v1.19.9 \
            scan -i k8s -d /src/infra \
            -o sarif > terrascan-results.sarif || true

      - name: Upload Terrascan results
        uses: github/codeql-action/upload-sarif@v3.30.0
        with:
          sarif_file: terrascan-results.sarif
          category: terrascan

  sast-sonarcloud:
    name: SAST with SonarCloud
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v6.0.0
        with:
          go-version: '1.25.0'

      - name: Run tests with coverage
        run: |
          go test -coverprofile=coverage.out ./...
        working-directory: ./services/api-gateway

      - name: SonarCloud Scan
        if: env.SONAR_TOKEN != ''
        uses: SonarSource/sonarcloud-github-action@v5.0.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=stashfi
            -Dsonar.organization=${{ github.repository_owner }}
            -Dsonar.sources=.
            -Dsonar.exclusions=**/*_test.go,**/vendor/**,**/testdata/**
            -Dsonar.tests=.
            -Dsonar.test.inclusions=**/*_test.go
            -Dsonar.go.coverage.reportPaths=services/api-gateway/coverage.out

  security-report:
    name: Generate Security Report
    runs-on: ubuntu-latest
    needs: [code-scanning, dependency-scanning, secret-scanning, license-compliance, infrastructure-scanning]
    if: always()
    steps:
      - name: Generate comprehensive security report
        run: |
          cat > security-report.md << 'EOF'
          # Security Scan Report

          ## Scan Date
          $(date)

          ## Scan Results Summary

          ### Code Security
          - âœ… Gosec: Completed
          - âœ… Semgrep: Completed
          - âœ… CodeQL: Completed

          ### Dependency Security
          - âœ… Go Vulnerability Check: Completed
          - âœ… Nancy: Completed
          - âœ… OWASP Dependency Check: Completed

          ### Secret Detection
          - âœ… Gitleaks: Completed
          - âœ… TruffleHog: Completed
          - âœ… detect-secrets: Completed

          ### License Compliance
          - âœ… go-licenses: Completed

          ### Infrastructure Security
          - âœ… Checkov: Completed
          - âœ… Terrascan: Completed

          ## Recommendations

          1. **High Priority**
             - Address any critical vulnerabilities immediately
             - Remove any detected secrets and rotate credentials
             - Update dependencies with known vulnerabilities

          2. **Medium Priority**
             - Review and fix security misconfigurations
             - Implement missing security controls
             - Update to latest patch versions

          3. **Low Priority**
             - Consider security best practices improvements
             - Review informational findings
             - Plan for future security enhancements

          ## Compliance Status

          - OWASP Top 10: Scanned
          - CIS Benchmarks: Partial coverage
          - PCI DSS: Not applicable
          - GDPR: Review required

          ## Next Steps

          1. Review all findings in GitHub Security tab
          2. Create issues for critical findings
          3. Schedule remediation based on severity
          4. Re-scan after fixes are applied

          ---

          *This report was automatically generated by the Security Scanning workflow*
          EOF

          cat security-report.md >> $GITHUB_STEP_SUMMARY

      - name: Upload security report
        uses: actions/upload-artifact@v4.6.2
        if: ${{ !env.ACT }}  # Skip when running locally with act
        with:
          name: security-report
          path: security-report.md
          retention-days: 30

      - name: Save security report locally
        if: ${{ env.ACT }}  # Only run locally with act
        run: |
          mkdir -p /tmp/artifacts
          cp security-report.md /tmp/artifacts/ 2>/dev/null || true
          echo "ðŸ“¦ Security report saved locally to /tmp/artifacts/"

      - name: Create security issue if critical findings
        if: failure()
        uses: actions/github-script@v8
        with:
          script: |
            const issue = await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: 'ðŸš¨ Critical Security Findings Detected',
              body: `Critical security issues were detected in the latest scan.

              **Workflow Run:** ${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}

              Please review the security findings and address them immediately.

              cc @${context.repo.owner}`,
              labels: ['security', 'critical', 'automated']
            });

            console.log(`Created issue #${issue.data.number}`);
