name: Reusable Docker Build

on:
  workflow_call:
    inputs:
      image_name:
        description: 'Name of the Docker image'
        type: string
        required: true
      dockerfile_path:
        description: 'Path to Dockerfile directory'
        type: string
        default: '.'
      platforms:
        description: 'Target platforms'
        type: string
        default: 'linux/amd64,linux/arm64'
      push:
        description: 'Push image to registry'
        type: boolean
        default: false
      registry:
        description: 'Container registry'
        type: string
        default: 'ghcr.io'
      scan_image:
        description: 'Run security scans on image'
        type: boolean
        default: true
    outputs:
      image_digest:
        description: 'Image digest'
        value: ${{ jobs.build.outputs.digest }}
      image_tags:
        description: 'Image tags'
        value: ${{ jobs.build.outputs.tags }}

jobs:
  build:
    name: Build & Push Docker Image
    runs-on: ubuntu-24.04
    permissions:
      contents: read
      packages: write
      security-events: write
    outputs:
      digest: ${{ steps.build.outputs.digest }}
      tags: ${{ steps.meta.outputs.tags }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Compute lowercase owner
        id: owner
        run: echo "owner=${GITHUB_REPOSITORY_OWNER,,}" >> "$GITHUB_OUTPUT"

      - name: Set up QEMU
        if: contains(inputs.platforms, 'arm')
        uses: docker/setup-qemu-action@v3.6.0
        with:
          platforms: arm64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.11.1
        with:
          driver-opts: |
            network=host
            image=moby/buildkit:v0.18.1

      - name: Log in to Registry
        if: inputs.push
        uses: docker/login-action@v3.5.0
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5.8.0
        with:
          images: ${{ inputs.registry }}/${{ steps.owner.outputs.owner }}/${{ inputs.image_name }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push
        id: build
        uses: docker/build-push-action@v6.18.0
        with:
          context: ${{ inputs.dockerfile_path }}
          file: ${{ inputs.dockerfile_path }}/Dockerfile
          platforms: ${{ inputs.platforms }}
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          sbom: ${{ inputs.scan_image }}
          provenance: ${{ inputs.scan_image }}

      - name: Run Trivy vulnerability scan
        if: inputs.scan_image && inputs.push
        run: |
          IMAGE="${{ inputs.registry }}/${{ steps.owner.outputs.owner }}/${{ inputs.image_name }}@${{ steps.build.outputs.digest }}"
          trivy image "$IMAGE" \
            --format sarif \
            --output trivy-results.sarif \
            --severity CRITICAL,HIGH,MEDIUM

      - name: Upload Trivy results
        if: inputs.scan_image && inputs.push
        uses: github/codeql-action/upload-sarif@v3.30.0
        with:
          sarif_file: trivy-results.sarif
          category: trivy-container
