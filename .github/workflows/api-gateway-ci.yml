name: API Gateway CI

on:
  push:
    branches: [ main, "feat/**", "fix/**", "hotfix/**", "refactor/**", "perf/**", "chore/**" ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'

permissions:
  contents: read  # Default: read repository contents
  # Additional permissions will be set at job level as needed

env:
  GO_VERSION: '1.25.x'
  SERVICE_PATH: './services/api-gateway'

jobs:
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better analysis

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.SERVICE_PATH }}/go.sum

      - name: Check Go formatting
        run: |
          if [ -n "$(gofmt -l .)" ]; then
            echo "❌ Go code is not formatted. Run 'gofmt -w .' to fix."
            gofmt -d .
            exit 1
          fi
          echo "✅ Go code is properly formatted"
        working-directory: ${{ env.SERVICE_PATH }}

      - name: Run go vet
        run: go vet ./...
        working-directory: ${{ env.SERVICE_PATH }}

      - name: Install golangci-lint
        uses: golangci/golangci-lint-action@v6
        with:
          version: latest
          working-directory: ${{ env.SERVICE_PATH }}
          args: --timeout=5m --config=.golangci.yml
          skip-cache: false

      - name: Check for go.mod tidiness
        run: |
          go mod tidy
          files="go.mod"
          # Only include go.sum in the check if it exists after tidy
          if [ -f go.sum ]; then
            files="$files go.sum"
          fi
          if [ -n "$(git status --porcelain -- $files)" ]; then
            echo "❌ go.mod or go.sum is not tidy"
            git diff -- $files
            exit 1
          fi
          echo "✅ go.mod is tidy"
        working-directory: ${{ env.SERVICE_PATH }}

  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      fail-fast: false  # Continue testing other versions even if one fails
      matrix:
        go: ['1.22.x', '1.25.x']  # Test on multiple Go versions
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go ${{ matrix.go }}
        uses: actions/setup-go@v5
        with:
          go-version: ${{ matrix.go }}
          cache-dependency-path: ${{ env.SERVICE_PATH }}/go.sum

      - name: Run tests with race detector
        run: |
          go test -race -coverprofile=coverage.out -covermode=atomic ./...
          go tool cover -html=coverage.out -o coverage.html
        working-directory: ${{ env.SERVICE_PATH }}

      - name: Upload coverage to Codecov
        if: env.CODECOV_TOKEN != ''
        uses: codecov/codecov-action@v4
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        with:
          file: ${{ env.SERVICE_PATH }}/coverage.out
          flags: api-gateway
          name: api-gateway-${{ matrix.go }}
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Compress coverage artifacts
        run: |
          cd ${{ env.SERVICE_PATH }}
          tar -czf coverage.tar.gz coverage.out coverage.html

      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.go }}
          path: ${{ env.SERVICE_PATH }}/coverage.tar.gz
          retention-days: 7

      - name: Check test coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | sed 's/%//')
          echo "Coverage for Go ${{ matrix.go }}: ${COVERAGE}%"
          echo "coverage=${COVERAGE}" >> $GITHUB_OUTPUT

          # Add to job summary
          echo "### Test Coverage - Go ${{ matrix.go }}" >> $GITHUB_STEP_SUMMARY
          echo "Coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY

          THRESHOLD=70
          # Fail if coverage is below threshold
          if awk -v cov="$COVERAGE" -v thr="$THRESHOLD" 'BEGIN { exit (cov >= thr ? 0 : 1) }'; then
            echo "✅ Coverage meets threshold (≥${THRESHOLD}%)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage ${COVERAGE}% is below threshold ${THRESHOLD}%" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
        working-directory: ${{ env.SERVICE_PATH }}

  build:
    name: Build Binary
    runs-on: ubuntu-latest
    needs: lint-and-format
    strategy:
      fail-fast: false  # Build all targets even if one fails
      matrix:
        os: [linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.SERVICE_PATH }}/go.sum

      - name: Build binary for ${{ matrix.os }}/${{ matrix.arch }}
        run: |
          CGO_ENABLED=0 GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} \
          go build -v -ldflags="-s -w -X main.Version=${GITHUB_SHA::8}" \
          -o api-gateway-${{ matrix.os }}-${{ matrix.arch }} \
          .
        working-directory: ${{ env.SERVICE_PATH }}

      - name: Compress binary artifacts
        run: |
          cd ${{ env.SERVICE_PATH }}
          tar -czf binaries.tar.gz api-gateway-*

      - name: Upload binary artifacts
        uses: actions/upload-artifact@v4
        with:
          name: binary-${{ matrix.os }}-${{ matrix.arch }}
          path: ${{ env.SERVICE_PATH }}/binaries.tar.gz
          retention-days: 7

  vulnerability-scan:
    name: Vulnerability Scanning
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ${{ env.GO_VERSION }}
          cache-dependency-path: ${{ env.SERVICE_PATH }}/go.sum

      - name: Run govulncheck
        run: |
          go install golang.org/x/vuln/cmd/govulncheck@v1.1.3
          govulncheck ./...
        working-directory: ${{ env.SERVICE_PATH }}

      - name: Run Nancy dependency scan
        run: |
          go list -json -deps ./... | docker run --rm -i sonatypecorp/nancy:v1.0.46 sleuth
        working-directory: ${{ env.SERVICE_PATH }}
        continue-on-error: true  # Don't fail the build but report issues

  # Benchmarks are handled by the dedicated benchmark.yml workflow
  # See .github/workflows/benchmark.yml for performance testing
