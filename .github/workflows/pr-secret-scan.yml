name: PR Secret Detection

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'infra/**'
      - 'services/**/*.go'
      - '**/*.yml'
      - '**/*.yaml'
      - '**/*.env*'
      - '**/docker-compose*.yml'
      - '**/Dockerfile*'
      - '.github/**'

permissions:
  contents: read
  pull-requests: write  # To comment on PRs
  security-events: write  # To upload SARIF results

jobs:
  check-labels:
    name: Check if Secret Scan Required
    runs-on: ubuntu-latest
    outputs:
      should-scan: ${{ steps.check.outputs.should-scan }}
    steps:
      - name: Check PR labels and files
        id: check
        uses: actions/github-script@v7
        with:
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            // Check labels
            const labels = pr.labels.map(l => l.name);
            const securityLabels = ['security', 'infra', 'kubernetes', 'helm', 'docker', 'go'];
            const hasSecurityLabel = labels.some(label => securityLabels.includes(label));

            // Check changed files
            const { data: files } = await github.rest.pulls.listFiles({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number
            });

            const sensitivePatterns = [
              /^infra\//,
              /\.go$/,
              /\.yml$/,
              /\.yaml$/,
              /\.env/,
              /Dockerfile/,
              /docker-compose/,
              /^\.github\//
            ];

            const hasSensitiveFiles = files.some(file =>
              sensitivePatterns.some(pattern => pattern.test(file.filename))
            );

            const shouldScan = hasSecurityLabel || hasSensitiveFiles;
            console.log(`Should scan: ${shouldScan} (Label: ${hasSecurityLabel}, Files: ${hasSensitiveFiles})`);

            // Set output
            core.setOutput('should-scan', shouldScan);

            // Add label if needed
            if (shouldScan && !labels.includes('security-review')) {
              await github.rest.issues.addLabels({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                labels: ['security-review']
              });
            }

            return shouldScan;

  secret-scan:
    name: Secret Detection Scan
    runs-on: ubuntu-latest
    needs: check-labels
    if: needs.check-labels.outputs.should-scan == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Full history for better detection

      - name: TruffleHog Secret Scan (Docker CLI)
        id: trufflehog
        run: |
          BASE=${{ github.event.pull_request.base.sha }}
          HEAD=${{ github.event.pull_request.head.sha }}
          echo "Scanning git diff from $BASE to $HEAD with TruffleHog"
          docker run --rm \
            -v "$PWD:/repo" -w /repo \
            trufflesecurity/trufflehog:latest \
            git file:///repo \
            --since-commit "$BASE" \
            --branch "$HEAD" \
            --only-verified \
            --json \
            | tee trufflehog.json
        # TruffleHog exits non-zero when findings are present; let the job mark failure for PR comment step

      - name: Gitleaks Secret Scan
        id: gitleaks
        uses: gitleaks/gitleaks-action@v2.3.9
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE }}  # Optional: for additional features

      - name: Custom Pattern Scan
        id: custom-scan
        run: |
          echo "🔍 Scanning for custom patterns..."

          # Custom patterns for Stashfi-specific secrets
          patterns=(
            'KONG_[A-Z_]+=["\x27]?[a-zA-Z0-9_\-]+["\x27]?'
            'API_KEY=["\x27]?[a-zA-Z0-9_\-]{20,}["\x27]?'
            'SECRET=["\x27]?[a-zA-Z0-9_\-]{20,}["\x27]?'
            'TOKEN=["\x27]?[a-zA-Z0-9_\-]{20,}["\x27]?'
            'PASSWORD=["\x27]?.+["\x27]?'
            'postgresql:\/\/[^:]+:[^@]+@'
            'mongodb:\/\/[^:]+:[^@]+@'
            'redis:\/\/[^:]+:[^@]+@'
          )

          found_secrets=false

          for pattern in "${patterns[@]}"; do
            echo "Checking pattern: $pattern"
            if git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | grep -E "$pattern"; then
              echo "⚠️ Potential secret found matching pattern: $pattern"
              found_secrets=true
            fi
          done

          if [ "$found_secrets" = true ]; then
            echo "found=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "✅ No custom pattern matches found"
            echo "found=false" >> $GITHUB_OUTPUT
          fi

      - name: Check for hardcoded IPs and URLs
        run: |
          echo "🔍 Checking for hardcoded IPs and URLs..."

          # Check for hardcoded IPs (excluding documentation and localhost)
          if git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | \
             grep -E '\b([0-9]{1,3}\.){3}[0-9]{1,3}\b' | \
             grep -v '127.0.0.1' | \
             grep -v '0.0.0.0' | \
             grep -v '192.168' | \
             grep -v '10.0' | \
             grep -v '172.'; then
            echo "⚠️ Hardcoded IP addresses found"
          fi

          # Check for hardcoded URLs with credentials
          if git diff ${{ github.event.pull_request.base.sha }}..${{ github.event.pull_request.head.sha }} | \
             grep -E 'https?://[^:]+:[^@]+@'; then
            echo "⚠️ URLs with embedded credentials found"
            exit 1
          fi

      - name: Comment on PR
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            const comment = `## 🚨 Secret Detection Alert

            Potential secrets or sensitive information detected in this PR.

            ### Actions Required:
            1. **Remove any secrets** from the code
            2. **Rotate any exposed credentials** immediately
            3. **Use environment variables** or secret management instead
            4. **Review the failed checks** for details

            ### Best Practices:
            - Never commit secrets, API keys, or passwords
            - Use \`.env.example\` files with placeholder values
            - Configure secrets in GitHub Settings > Secrets
            - Use tools like \`git-secrets\` locally to prevent commits

            ### Resources:
            - [GitHub Secrets Documentation](https://docs.github.com/en/actions/security-guides/encrypted-secrets)
            - [12 Factor App - Config](https://12factor.net/config)

            ---
            *This check is mandatory for all PRs touching infrastructure or Go code.*`;

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });

      - name: Generate SARIF report
        if: always()
        run: |
          cat > secret-scan-results.sarif << 'EOF'
          {
            "version": "2.1.0",
            "$schema": "https://json.schemastore.org/sarif-2.1.0.json",
            "runs": [
              {
                "tool": {
                  "driver": {
                    "name": "PR Secret Scanner",
                    "informationUri": "https://github.com/${{ github.repository }}",
                    "version": "1.0.0",
                    "rules": [
                      {
                        "id": "SEC001",
                        "name": "HardcodedSecret",
                        "shortDescription": {
                          "text": "Potential hardcoded secret detected"
                        },
                        "fullDescription": {
                          "text": "A potential secret or sensitive information was detected in the code"
                        },
                        "help": {
                          "text": "Remove secrets from code and use environment variables or secret management systems"
                        },
                        "defaultConfiguration": {
                          "level": "error"
                        }
                      }
                    ]
                  }
                },
                "results": []
              }
            ]
          }
          EOF

      - name: Upload SARIF results
        if: always()
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: secret-scan-results.sarif
          category: pr-secret-scan

  block-merge:
    name: Block Merge if Secrets Found
    runs-on: ubuntu-latest
    needs: [check-labels, secret-scan]
    if: always() && needs.check-labels.outputs.should-scan == 'true'
    steps:
      - name: Set merge status
        uses: actions/github-script@v7
        with:
          script: |
            const scanPassed = '${{ needs.secret-scan.result }}' === 'success';

            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: scanPassed ? 'success' : 'failure',
              target_url: `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId}`,
              description: scanPassed ? 'No secrets detected' : 'Secrets detected - merge blocked',
              context: 'Secret Detection'
            });

            if (!scanPassed) {
              core.setFailed('Secrets detected in PR - merge blocked');
            }
