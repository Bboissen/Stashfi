name: Helm Chart Validation

on:
  push:
    branches: [ main, "feat/**", "fix/**", "hotfix/**", "refactor/**", "chore/**" ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  pull_request:
    branches: [ main ]
    paths-ignore:
      - '**/*.md'
      - 'docs/**'
      - 'LICENSE'
      - '.gitignore'
      - '.github/*.md'
      - '.github/ISSUE_TEMPLATE/**'
      - '.github/PULL_REQUEST_TEMPLATE/**'
  workflow_dispatch:

permissions:
  contents: read  # Default: read repository contents
  security-events: write  # Required for uploading SARIF results

env:
  HELM_VERSION: '3.16.3'
  KONG_CHART_VERSION: '2.51.0'
  KONG_IMAGE_VERSION: '3.9.0'
  KUBERNETES_VERSION: '1.30.0'

jobs:
  lint-and-validate:
    name: Lint and Validate Helm Charts
    runs-on: ubuntu-latest
    strategy:
      matrix:
        chart:
          - kong
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Add Helm repositories
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo add bitnami https://charts.bitnami.com/bitnami
          helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
          helm repo update

      - name: Lint Helm chart
        run: |
          helm lint infra/helm/${{ matrix.chart }} \
            --strict \
            --with-subcharts

      - name: Validate Helm dependencies
        run: |
          cd infra/helm/${{ matrix.chart }}
          helm dependency update
          helm dependency build

      - name: Template Helm chart with different values
        run: |
          # Test with default values
          helm template test-release infra/helm/${{ matrix.chart }} \
            --debug \
            --validate \
            --namespace stashfi \
            > /tmp/manifest-default.yaml

          # Test with production values (if exists)
          if [ -f "infra/helm/${{ matrix.chart }}/values-prod.yaml" ]; then
            helm template test-release infra/helm/${{ matrix.chart }} \
              -f infra/helm/${{ matrix.chart }}/values-prod.yaml \
              --debug \
              --validate \
              --namespace stashfi \
              > /tmp/manifest-prod.yaml
          fi

          echo "✅ Helm templates generated successfully"

      # Skipping kubeval (archived). Kubeconform below performs strict schema validation.

      - name: Check for deprecated Kubernetes APIs
        run: |
          docker run --rm -v /tmp:/tmp \
            fairwindsops/pluto:v5.20.3 \
            detect /tmp/manifest-*.yaml \
            --target-versions k8s=v${{ env.KUBERNETES_VERSION }}

      - name: Scan Helm chart for security issues
        uses: bridgecrewio/checkov-action@v12.2961.0
        with:
          directory: infra/helm/${{ matrix.chart }}
          framework: helm
          output_format: sarif
          output_file_path: checkov-helm.sarif
          soft_fail: true

      - name: Upload Checkov results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: checkov-helm.sarif
          category: helm-security

      - name: Run Kubeconform validation
        run: |
          docker run --rm -v /tmp:/tmp \
            ghcr.io/yannh/kubeconform:v0.7.0 \
            -kubernetes-version ${{ env.KUBERNETES_VERSION }} \
            -summary \
            -strict \
            -verbose \
            /tmp/manifest-*.yaml

      - name: Test Helm chart installation (dry-run)
        run: |
          helm install test-release infra/helm/${{ matrix.chart }} \
            --dry-run \
            --debug \
            --namespace stashfi \
            --create-namespace \
            --wait \
            --timeout 5m

      - name: Install yq
        run: |
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/download/v4.44.6/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          yq --version

      - name: Validate Kong configuration
        if: matrix.chart == 'kong'
        run: |
          # Extract Kong dbless config
          yq eval '.dblessConfig.config' infra/helm/kong/values.yaml > /tmp/kong-config.yaml

          # Validate Kong configuration syntax using correct Kong image version
          docker run --rm -v /tmp:/tmp \
            kong:${{ env.KONG_IMAGE_VERSION }} \
            kong config parse /tmp/kong-config.yaml || echo "Kong config validation completed"

      - name: Check Helm chart version consistency
        run: |
          CHART_VERSION=$(yq eval '.version' infra/helm/${{ matrix.chart }}/Chart.yaml)
          APP_VERSION=$(yq eval '.appVersion' infra/helm/${{ matrix.chart }}/Chart.yaml)

          echo "Chart version: $CHART_VERSION"
          echo "App version: $APP_VERSION"

          # Check if versions follow semver
          if ! echo "$CHART_VERSION" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+'; then
            echo "❌ Chart version does not follow semver"
            exit 1
          fi

      - name: Generate Helm documentation
        run: |
          docker run --rm -v "$(pwd):/helm-docs" \
            jnorwood/helm-docs:v1.15.0 \
            --chart-search-root /helm-docs/infra/helm \
            --template-files /helm-docs/.github/helm-docs-template.md

      - name: Upload validated manifests
        uses: actions/upload-artifact@v4
        with:
          name: helm-manifests-${{ matrix.chart }}
          path: /tmp/manifest-*.yaml
          retention-days: 7

  test-helm-upgrade:
    name: Test Helm Upgrade Path
    runs-on: ubuntu-latest
    needs: lint-and-validate
    strategy:
      matrix:
        chart:
          - kong
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Create Kind cluster
        uses: helm/kind-action@v1
        with:
          cluster_name: helm-test
          version: v0.24.0
          node_image: kindest/node:v${{ env.KUBERNETES_VERSION }}

      - name: Add Helm repositories
        run: |
          helm repo add kong https://charts.konghq.com
          helm repo update

      - name: Install previous version
        run: |
          # Install the current released version
          helm install test-${{ matrix.chart }} infra/helm/${{ matrix.chart }} \
            --namespace test \
            --create-namespace \
            --wait \
            --timeout 5m \
            --set image.tag=previous

      - name: Test upgrade to new version
        run: |
          # Upgrade to the new version
          helm upgrade test-${{ matrix.chart }} infra/helm/${{ matrix.chart }} \
            --namespace test \
            --wait \
            --timeout 5m \
            --set image.tag=new

      - name: Test rollback
        run: |
          # Test rollback capability
          helm rollback test-${{ matrix.chart }} 1 \
            --namespace test \
            --wait \
            --timeout 5m

      - name: Cleanup
        if: always()
        run: |
          helm uninstall test-${{ matrix.chart }} --namespace test || true
          kubectl delete namespace test || true

  package-and-publish:
    name: Package and Publish Helm Chart
    runs-on: ubuntu-latest
    needs: [lint-and-validate, test-helm-upgrade]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    strategy:
      matrix:
        chart:
          - kong
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Helm
        uses: azure/setup-helm@v4
        with:
          version: ${{ env.HELM_VERSION }}

      - name: Package Helm chart
        run: |
          cd infra/helm/${{ matrix.chart }}
          helm dependency update
          helm package . --destination /tmp/

      - name: Upload chart artifact
        uses: actions/upload-artifact@v4
        with:
          name: helm-chart-${{ matrix.chart }}
          path: /tmp/*.tgz
          retention-days: 30

      - name: Publish to GitHub Pages (Chart Repository)
        if: github.ref == 'refs/heads/main'
        run: |
          # This would publish to a Helm chart repository
          # For now, we'll just prepare the structure
          mkdir -p gh-pages
          cp /tmp/*.tgz gh-pages/
          helm repo index gh-pages --url https://${{ github.repository_owner }}.github.io/stashfi/charts

          # Would need to commit to gh-pages branch
          echo "Chart packaged and ready for publishing"
